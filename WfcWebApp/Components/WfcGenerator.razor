<!-- component used to store and access WFC logic with basic trigger buttons  -->
@using WfcWebApp.Wfc

<div style="display: flex; flex-direction: column; gap: 8px;">
	<label>
		<input type="checkbox" @bind="Wrap" />
		Wrap around edges
	</label>

	<label>
		<input type="checkbox" @bind="RotationalSymmetry" />
		Use rotational symmetry
	</label>

	<label>
		Output Width:
		<input type="number" @bind="OutputWidth" min="10" max="1024" style="width: 80px;" />
	</label>

	<label>
		Output Height:
		<input type="number" @bind="OutputHeight" min="10" max="1024" style="width: 80px;" />
	</label>
</div>

<div>
    @switch (Mode)
    {
        case GenerationMode.MultiStep:
            <button @onclick="SingleStep">One Step</button>
            <button @onclick="FullBackpropStep">Continue Over Backprop</button>
            <button @onclick="FullGenerate">Continue Until Complete</button>
            break;
        case GenerationMode.AutoRun:
            <button @onclick="FullGenerate">Run Generation</button>
            break;
    }
</div>

@code {

    public enum GenerationMode {
        MultiStep,
        AutoRun
    }
    [Parameter] public GenerationMode Mode { get; set; } = GenerationMode.MultiStep;
    [Parameter] public EventCallback<Generator.StepResult> OnStepComplete { get; set; }
    
    [Parameter] public IndexedImage PaletteImage { get; set; }

    Generator wfcGenerator = new();

    public bool Wrap { get; set; } = true;
	public bool RotationalSymmetry { get; set; } = true;
	public int OutputWidth { get; set; } = 64;
	public int OutputHeight { get; set; } = 64;

    public async Task FullGenerate() {
        wfcGenerator.Initialize(OutputWidth, OutputHeight, Wrap, RotationalSymmetry, PaletteImage);
        var result = wfcGenerator.Next();
        while (!(result == Generator.StepResult.Completed
            || result == Generator.StepResult.Error))
        {
            result = wfcGenerator.Next();
            if (result == Generator.StepResult.BackpropConvergence) {
                await OnStepComplete.InvokeAsync(result);
            }
        }
        await OnStepComplete.InvokeAsync(result);
    }

    // performs a single step of the algorithm
    public async Task SingleStep() {
        var result = wfcGenerator.Next();
        await OnStepComplete.InvokeAsync(result);
    }

    // performs steps until we reach a BackpropConvergence result (or Completed)
    public async Task FullBackpropStep() {
        var result = wfcGenerator.Next();
        while (!(result == Generator.StepResult.BackpropConvergence 
            || result == Generator.StepResult.Completed
            || result == Generator.StepResult.Error))
        {
            result = wfcGenerator.Next();
        }
        await OnStepComplete.InvokeAsync(result);
    }
}