@page "/"
@using WfcWebApp.Wfc
@using WfcWebApp.Utils

<PageTitle>Texture Generator</PageTitle>

<h3>Texture Generator</h3>
<p>
    Generate seamless, wrapping textures of any size using wave function collapse!<br/>
    Upload a suitable input texture below, or draw one yourself!
</p>

<Upload OnImageChanged="@HandleImageChanged"/>
<DrawableCanvas Image="@userInputImage"/>
<WfcParameters @ref="parametersRef"/>
<WfcGenerator
    @ref="generatorRef"
    PaletteImage="@userInputImage"
    OnStepComplete="@OnGenerationStep"
    />
<div style="display: flex; gap: 8px; align-items: start;">
	<SwatchImageCanvas @ref="swatchCanvasRef" />
	<SwatchImageCanvas @ref="entropyCanvasRef" />
</div>

@code {
    private WfcGenerator generatorRef;
    private WfcParameters parametersRef;
    private IndexedImage userInputImage = IndexedImage.CreateBlank(32, 32);

    private VisualWaveRenderer waveVisualizer = new();

    private void HandleImageChanged(IndexedImage image) {
        userInputImage = image;
    }

    private SwatchImage? outputImage = null;
    private SwatchImage? entropyImage = null;
    private SwatchImageCanvas swatchCanvasRef = default!;
    private SwatchImageCanvas entropyCanvasRef = default!;
    private async Task OnGenerationStep(Generator.StepResult result) {
        if (outputImage == null) {
            outputImage = new(generatorRef.Config.OutputWidth, generatorRef.Config.OutputHeight);
            swatchCanvasRef.SetImage(outputImage);
        }
        waveVisualizer.RenderToImage(generatorRef.wfcGenerator.Wave, generatorRef.wfcGenerator.Palette, outputImage);
        waveVisualizer.RenderToEntropy(generatorRef.wfcGenerator.Wave, entropyImage);
        await swatchCanvasRef.Rerender();
        await entropyCanvasRef.Rerender();
        await Task.Delay(20);
    }

}

