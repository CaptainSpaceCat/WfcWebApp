@page "/upload"
@inject IJSRuntime JS
@using WfcWebApp.Wfc


<script src="imageUtils.js"></script>

<h3>Upload and Display an Image</h3>

<InputFile OnChange="@OnFileChange" accept="image/*" />

@if (hasInputImage) {
    <ul>
        <li>Name: @inputFilename</li>
        <li>Dimensions (pixels): (@inputWidth, @inputHeight)</li>
        <li>
            Number of unique colors: @wfcPalette.colorMapping.Count
        </li>
        <li>
            <p>Number / Weight of unique patterns: @wfcPalette.CountPatterns()</p>
        </li>
        <li>
            <img src="@imageDataUrl" alt="Failed to display image." 
            style="display: block; margin-top: 10px; width: @(inputWidth*6)px; height: @(inputHeight*6)px; image-rendering: pixelated;">
        </li>
        <li>
            Input wraparound mode:
            <input type="checkbox" @bind="wfcPalette.Wrap" />
        </li>
        <li>
            Include Symmetries:
            <input type="checkbox" @bind="wfcPalette.RotationalSymmetry" />
        </li>
        <li><button @onclick="OnPreprocess">Preprocess</button></li>
    </ul>

    @if (true) {
        <p>
            <label>
                Output width:
                <input type="number" @bind="outputWidth" />
            </label>
            <label>
                Output height:
                <input type="number" @bind="outputHeight" />
            </label>
        </p>
        <p>
            <label>
                Wraparound mode:
                <input type="checkbox" @bind="outputWrapMode" />
            </label>
        </p>

        <p>
            <button @onclick="OnGenerate">Generate</button>
        </p>

        <p>
            <canvas id="outputCanvas" width="@outputWidth" height="@outputHeight"
            style="border: 1px solid black; width: @(outputWidth*6)px; height: @(outputHeight*6)px; image-rendering: pixelated;
            @(generateState > 0 ? "display: block;" : "display: none;")">
            </canvas>
            <canvas id="entropyCanvas" width="@outputWidth" height="@outputHeight"
            style="border: 1px solid black; width: @(outputWidth*6)px; height: @(outputHeight*6)px; image-rendering: pixelated;
            @(generateState > 0 ? "display: block;" : "display: none;")">
            </canvas>
        </p>

        @if (generateState == 1) {
            <p>
                Generating with wave function collapse...
            </p>
        } else if (generateState == 2) {
            <p>
                Generation complete!
            </p>
        }
    }
}




@code {
    private string? imageDataUrl;
    private WfcWave wfcWave = new();
    private WfcPalette? wfcPalette;
    private WfcGenerator wfcGenerator = new();

    private ImageDataRaw? displayCanvasData, entropyCanvasData;
    private bool hasInputImage = false;
    private string? inputFilename;
    private int inputWidth, inputHeight;

    private bool inputWrapMode = false;
    private bool outputWrapMode = true;
    private int generateState = 0;

    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) {
            return;
        }
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        // Convert to Base64
        imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";

        ImageDataRaw imageData = await JS.InvokeAsync<ImageDataRaw>("getImagePixels", imageDataUrl);
        wfcPalette = new WfcPalette(imageData);
        wfcWave.Clear();

        wfcGenerator.SetDependencies(wfcWave, wfcPalette, (int)DateTime.UtcNow.Ticks);

        inputWidth = imageData.Width;
        inputHeight = imageData.Height;
        inputFilename = file.Name;
        hasInputImage = true;
        
        
    }

    private int outputWidth = 32;
    private int outputHeight = 32;



    private async Task OnGenerate()
    {
        wfcWave.Clear();
        wfcWave.Wrap = outputWrapMode;
        wfcWave.boundaryCorner = Vector2I.Zero;
        wfcWave.boundaryShape = new Vector2I(outputWidth, outputHeight);
        generateState = 1;
        displayCanvasData = new ImageDataRaw(outputWidth, outputHeight);
        entropyCanvasData = new ImageDataRaw(outputWidth, outputHeight);

        int c = 0;
        while (wfcGenerator.RunSingle()) {
            if (c%1 == 0) {
                WriteWaveContentToImage(wfcWave, displayCanvasData);
                await JS.InvokeAsync<ImageDataRaw>("updateCanvasPixels", "outputCanvas", displayCanvasData.Width, displayCanvasData.Height, displayCanvasData.PixelData);
                WriteWaveEntropyToImage(wfcWave, entropyCanvasData);
                await JS.InvokeAsync<ImageDataRaw>("updateCanvasPixels", "entropyCanvas", displayCanvasData.Width, displayCanvasData.Height, entropyCanvasData.PixelData);
                await Task.Delay(10);
            }
            c++;
        }
        WriteWaveContentToImage(wfcWave, displayCanvasData);
        await JS.InvokeAsync<ImageDataRaw>("updateCanvasPixels", "outputCanvas", displayCanvasData.Width, displayCanvasData.Height, displayCanvasData.PixelData);
        WriteWaveEntropyToImage(wfcWave, entropyCanvasData);
        await JS.InvokeAsync<ImageDataRaw>("updateCanvasPixels", "entropyCanvas", displayCanvasData.Width, displayCanvasData.Height, entropyCanvasData.PixelData);
    }

    private async Task OnPreprocess()
    {
        wfcGenerator.wfcPalette.Preprocess();
    }

    public void WriteWaveEntropyToImage(WfcWave wave, ImageDataRaw canvas)
    {
        int maxEntropy = wave.GetMaxObservedEntropy();
        Vector2I pos = new();
        for (int x = 0; x < canvas.Width; x++)
        {
            for (int y = 0; y < canvas.Height; y++)
            {
                pos.X = x;
                pos.Y = y;
                ColorRGBA color = new();
                color.A = 255;
                if (wave.IsUnobserved(pos))
                {
                    color.R = color.G = color.B = 127;
                }
                else if (wave.IsContradiction(pos))
                {
                    color.R = color.G = color.B = 50;
                }
                else if (wave.IsCollapsed(pos))
                {
                    color.R = color.G = color.B = 200;
                }
                else
                {
                    float percent = MathUtils.InverseLerp(wave.GetEntropy(pos), 1, maxEntropy);
                    color = ColorGradient.Rainbow.Sample(percent);
                    
                }
                canvas.SetPixel(x, y, color);
            }
        }
    }

    public void WriteWaveContentToImage(WfcWave wave, ImageDataRaw canvas) {
        Swatch swatch = new Swatch(canvas.Width, canvas.Height, false);
        for (int x = 0; x < canvas.Width; x++) {
            for (int y = 0; y < canvas.Height; y++) {
                Vector2I pos = new Vector2I(x, y);
                foreach (int index in wave.EnumeratePatternSet(pos)) {
                    //Pattern pattern = palette.PatternFromIndex(index);
                    //swatch.PaintPattern(pattern, pos, wfcPalette.colorMapping);
                }
            }
        }

        for (int x = 0; x < canvas.Width; x++) {
            for (int y = 0; y < canvas.Height; y++) {
                canvas.SetPixel(x, y, swatch.GetColorAt(x, y));
            }
        }
    }

    public class Swatch
    {
        public int Width, Height;

        private int[,,] colorData;
        private int[,] weights;
        public readonly bool Wrap;

        public Swatch(int w, int h, bool wrap = false) {
            Width = w;
            Height = h;
            colorData = new int[w,h,4];
            weights = new int[w,h];
            Wrap = wrap;
        }

        public ColorRGBA GetColorAt(int x, int y) {
            if (weights[x,y] == 0) {
                return new ColorRGBA();
            }
            byte R = (byte)(colorData[x,y,0]/weights[x,y]);
            byte G = (byte)(colorData[x,y,1]/weights[x,y]);
            byte B = (byte)(colorData[x,y,2]/weights[x,y]);
            byte A = (byte)(colorData[x,y,3]/weights[x,y]);
            return new ColorRGBA(R, G, B, A);
        }

        public void PaintPattern(Pattern pattern, Vector2I pos, ColorMapping colorMap) {
            for (int x = 0; x < pattern.Size; x++) {
                for (int y = 0; y < pattern.Size; y++) {
                    int mask = pattern.GetValue(new Vector2I(x, y));
                    ColorRGBA color = colorMap.MaskToColor(mask);
                    Vector2I offset = new Vector2I(x + pos.X, y + pos.Y);
                    if (offset.X < 0 || offset.Y < 0 || offset.X >= Width || offset.Y >= Height) {
                        if (!Wrap) {
                            //skip painting it if it's gonna be off-screen
                            continue;
                        }
                        offset.X = ((offset.X % Width) + Width) % Width;
                        offset.Y = ((offset.Y % Height) + Height) % Height;
                    }
                    colorData[offset.X, offset.Y, 0] += color.R;
                    colorData[offset.X, offset.Y, 1] += color.G;
                    colorData[offset.X, offset.Y, 2] += color.B;
                    colorData[offset.X, offset.Y, 3] += color.A;
                    weights[offset.X, offset.Y]++;
                }
            }
        }

        public ImageDataRaw OutputToImage() {
            ImageDataRaw output = new(Width, Height);
            for (int x = 0; x < Width; x++) {
                for (int y = 0; y < Height; y++) {
                    output.SetPixel(x, y, GetColorAt(x, y));
                }
            }
            return output;
        }
    }

}